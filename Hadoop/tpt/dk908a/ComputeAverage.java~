package tpt.dk908a;

import java.io.IOException;
import java.util.regex.Pattern;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.io.FloatWritable;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;

import org.apache.log4j.Logger;


public class ComputeAverage {
    
    public static class Map extends Mapper<LongWritable, Text, Text, FloatWritable> {

	public void map(LongWritable offset, Text moviePair, Context context)
	    throws IOException, InterruptedException {
	    //FILL HERE
	    //
	    String[] strs = moviePair.toString().split(",");
	    Float v = Float.parseFloat(strs[2]);
	    context.write(new Text(strs[1]),new FloatWritable(v));
	}
    }
    
    public static class Reduce extends Reducer<Text, FloatWritable, Text, FloatWritable> {

	public void reduce(Text movie, Iterable<FloatWritable> values, Context context) 
	    throws IOException, InterruptedException {
	    // FILL HERE
	    //
	    float sum = 0;
	    int count = 0;
	    for(FloatWritable v : values) {
		sum += v.get();
		count++;
	    }
	    context.write(movie, new FloatWritable(sum/count));
	}
    }
}


